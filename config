services:
  client:
    build:
      context: .
      dockerfile: client/Dockerfile
      target: local
    ports:
      - "3000:3000"
    env_file:
      - .env
    depends_on:
      - backend
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./client/src:/app/src
    restart: on-failure
    command: "npm run dev"

  backend: &backend
    build:
      context: .
      dockerfile: backend/Dockerfile
      target: local
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      DOCKER_SERVICE_NAME: "BACKEND"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./backend:/app
      - /app/ML/
    restart: on-failure
    command:
      - /bin/sh
      - -c
      - |
        uv pip install --system --upgrade pip
        uv pip install --system -r requirements.txt
        uvicorn app:app --host 0.0.0.0 --port 8000 --reload --reload-exclude '*.pdf'

  db:
    image: postgres:13
    env_file:
      - .env
    ports:
      - "5432:5432"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
    depends_on:
      - seq
      - azurite
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    volumes:
      - ./postgres-data:/var/lib/postgresql/data

  redis:
    image: redis:7.4.1
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 1s
      timeout: 30s
      retries: 5
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./redis:/data

  rabbitmq:
    image: rabbitmq:3-management
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q ping"]
      interval: 18s
      timeout: 5s
      retries: 5
    volumes:
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    restart: on-failure

  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    networks:
      - app-network
    env_file:
      - .env
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      - backend
      - client
      - flower
    restart: on-failure

  celery_worker:
    <<: *backend
    deploy:
      replicas: 3
    env_file:
      - .env
    environment:
      DOCKER_SERVICE_NAME: "WORKER"
    ports: []
    healthcheck:
      test: ["CMD-SHELL", "celery -A tasks inspect ping"]
      interval: 10s
      timeout: 30s
      retries: 5
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./backend:/app
      - /app/ML/
    restart: on-failure
    command:
      - /bin/sh
      - -c
      - |
        uv pip install --system --upgrade pip
        uv pip install --system -r requirements.txt
        watchmedo auto-restart --directory=/app --pattern=*.py --recursive -- celery -A tasks worker --pool=eventlet --concurrency=500
        celery -A tasks worker --pool=eventlet --concurrency=500 --events

  celery_beat:
    <<: *backend
    env_file:
      - .env
    environment:
      DOCKER_SERVICE_NAME: "SCHEDULER"
    ports: []
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./backend:/app
      - /app/ML/
    restart: on-failure
    command:
      - /bin/sh
      - -c
      - |
        uv pip install --system --upgrade pip
        uv pip install --system -r requirements.txt
        celery -A tasks beat --loglevel=info

  seq:
    image: datalust/seq:latest
    env_file:
      - .env
    environment:
      ACCEPT_EULA: "Y"
    networks:
      - app-network
    restart: always
    volumes:
      - ./seq-data:/data

  flower:
    image: mher/flower:2.0.0
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
      celery_worker:
        condition: service_healthy
    expose:
      - 5555
    env_file:
      - .env
    networks:
      - app-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - CELERY_BROKER_URL=amqp://${BROKER_USER}:${BROKER_PASSWORD}@rabbitmq:5672/
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/1
      - FLOWER_URL_PREFIX=/monitoring
    command: celery flower --conf="/data/flowerconfig.py"
    volumes:
      - ./flowerconfig.py:/data/flowerconfig.py
      - ./flower-data:/etc/db

  azurite:
    image: mcr.microsoft.com/azure-storage/azurite
    container_name: azurite
    env_file:
      - .env
    ports:
      - "10000:10000" # Blob service
      - "10001:10001" # Queue service
      - "10002:10002" # Table service
    volumes:
      - ./azurite-data:/data
    networks:
      - app-network
    restart: always

networks:
  app-network:
    driver: bridge
